//@ Function taken from sonic3air_dev/scripts/maingame/hud/hud.lemon
//# address-hook(0x00db44) end(0x00dbb2)
function void RenderHUD()
{
	// Render a regular HUD if not Debug mode
	if (!debug_mode.state)
	{
		base.RenderHUD()
		return
	}
	
	// Draw the center of the character
	Debug.drawRect(achievementsplus.selectionTool.tempValue5, achievementsplus.selectionTool.tempValue6, 0x01, 0x01, 0xfffffff0)
	
	AchievementsPlusTools.hud.updateDraw()
	AchievementsPlusTools.hud.items()
	
	// Make the screen darker
	Renderer.drawCustomSprite("menu_background_5", getScreenWidth() / 0x02, 0x00, 0x00, SPRITE_FLAG_PRIO, 0xffff, 0x00, 0x50)
}

// The main function of rendering all items inside the tool,
function void AchievementsPlusTools.hud.items()
{
	s16 px = 12
	s16 py = 10
	
	AchievementsPlusTools.hud.items.positionDebug(px, py)
	AchievementsPlusTools.hud.items.modeSelected(px, py)
}


// The function renders the selected mode selection.
function void AchievementsPlusTools.hud.items.modeSelected(s16 px, s16 py)
{
	px = getScreenWidth() / 0x02
	
	constant array<string> SELECTION_MODE =
	{
		"Area selection", "Blocked Wall Selection"
	}
	
	AchievementsPlus.TextManager.drawText(px, py, "Mode: " + SELECTION_MODE[achievementsplus.toolMode.tempValue0], FONT_SMALLFONT, FORMAT_UPPERCASE, ALIGN_CENTER, 0x01, 0xffff)
}


// The function renders the character position, points, and the size of the selected arena.
function void AchievementsPlusTools.hud.items.positionDebug(s16 px, s16 py)
{
	// Player position
	{
		AchievementsPlus.TextManager.drawText(px, py, "Player position:", FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("X: %d", achievementsplus.selectionTool.tempValue5), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xfe4e4eff, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("Y: %d", achievementsplus.selectionTool.tempValue6), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0x75fe4eff, 0xffff)
	}
	
	py += 18
	
	// First point position
	{
		AchievementsPlus.TextManager.drawText(px, py, "First point:", FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("X: %d", achievementsplus.selectionTool.tempValue0), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xfe4e4eff, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("Y: %d", achievementsplus.selectionTool.tempValue1), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0x75fe4eff, 0xffff)
	}
	
	px += 72
	py -= 16
	
	// Second point position
	{
		AchievementsPlus.TextManager.drawText(px, py, "Second point:", FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("X: %d", achievementsplus.selectionTool.tempValue2), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xfe4e4eff, 0xffff)
		
		py += 0x08
		AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("Y: %d", achievementsplus.selectionTool.tempValue3), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0x75fe4eff, 0xffff)
	}
	
	// Show selected area size
	if (achievementsplus.selectionTool.tempValue4 == 0x02)
	{
		px -= 72
		py += 18
		
		{
			AchievementsPlus.TextManager.drawText(px, py, "Area size:", FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xffff)
			
			py += 0x08
			AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("X: %d", abs(achievementsplus.selectionTool.tempValue0 - achievementsplus.selectionTool.tempValue2)), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0xfe4e4eff, 0xffff)
			
			py += 0x08
			AchievementsPlus.TextManager.drawText(px + 40, py, stringformat("Y: %d", abs(achievementsplus.selectionTool.tempValue1 - achievementsplus.selectionTool.tempValue3)), FONT_SMALLFONT, FORMAT_NONE, ALIGN_LEFT, 0x01, 0x75fe4eff, 0xffff)
		}
	}
}